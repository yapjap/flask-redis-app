---
services:
  web:
    build: .
    image: uyap/flask-redis-app:1.0      
    depends_on:
      redis:
        condition: service_healthy
        required: true
    environment:
      - REDIS_HOST=redis-service
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - TEMP_API_KEY=${TEMP_API_KEY}  # Add for Flask SECRET_KEY
    command: sh -c "./wait-for-redis.sh && flask run --host=0.0.0.0 --port=5000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "/app/health_check.sh"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s
      start_interval: 2s
    logging:
      driver: fluentd
      options:
        fluentd-address: fluentd:24224
        tag: flask.app
        fluentd-buffer-limit: "512k"
        fluentd-retry-wait: "500ms"
        fluentd-async: "true"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources:
        limits:
          cpus: '0.4'
          memory: 200M
        reservations:
          cpus: '0.2'
          memory: 100M
      mode: replicated
      placement:
        max_replicas_per_node: 2
    volumes:          
      - ./config/flask.conf:/app/config/flask.conf:ro
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    labels:
      - "com.example.description=Flask app for development"
      - "com.example.role=web"
    networks:
      - app-net
    profiles:
      - dev

  test:
    build: .
    command: pytest tests/test_app.py
    environment:
      - REDIS_HOST=redis-service
      - APP_TITLE=Test App
      - PYTHONPATH=/app
      - TEMP_API_KEY=${TEMP_API_KEY}  # Add environment-based secret
    depends_on:
      redis:
        condition: service_healthy
    secrets:
      - redis_password
      - flask_app_key  # New secret
    profiles:
      - test
    networks:
      - app-net
    dns:
      - 8.8.8.8
      - 1.1.1.1

  redis:
    build:
      context: .
      dockerfile: Dockerfile.redis
    image: uyap/redis-custom:1.0
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} 
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "/redis_health.sh"]
#      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]      
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s  # Increased for stability
      start_interval: 2s
    logging:
      driver: fluentd
      options:
        fluentd-address: fluentd:24224
        tag: redis.app
        fluentd-buffer-limit: "512k"
        fluentd-retry-wait: "500ms"
        fluentd-async: "true"
#    read_only: true
#    tmpfs:
#      - /tmp
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    cap_add:
      - DAC_OVERRIDE
      - NET_BIND_SERVICE
    profiles:
      - dev
      - prod
      - test
    networks:
      app-net:
        aliases:
          - redis-service
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M        

  web-prod:
    build:
      context: .
      dockerfile: Dockerfile.prod
    environment:
      - REDIS_HOST=redis-service
      - APP_TITLE=${APP_TITLE_PROD}
      - TEMP_API_KEY=${TEMP_API_KEY}  # Add environment-based secret
    secrets:
      - redis_password
      - flask_app_key  # New secret
    depends_on:
      redis:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 5s
    logging:
      driver: json-file
      options:
        max-size: "10m"  # Rotate at 10MB
        max-file: "3"    # Keep 3 files
        compress: "true" # Compress rotated logs
    volumes:          
      - ./config/flask.conf:/app/config/flask.conf:ro
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges=true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE          
    profiles:
      - prod
    networks:
      app-net:
        aliases:
          - flask-prod-service
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '0.7'
          memory: 512M
        reservations:
          cpus: '0.4'
          memory: 256M

  nginx-dev:
    image: nginx:latest
    volumes:
      - ./nginx-dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8080:80"
    depends_on:
      web:
        condition: service_healthy
    networks:
      app-net:
        aliases:
          - nginx-dev-service
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - dev

  nginx-prod:
    image: nginx:latest
    volumes:
      - ./nginx-prod.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8081:80"
    depends_on:
      - web-prod
    networks:
      app-net:
        aliases:
          - nginx-prod-service
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    profiles:
      - prod

  prometheus:
    build:
      context: .
      dockerfile: Dockerfile.prometheus
    image: flask-redis-app-prometheus
    read_only: true  # Day 25: Read-only filesystem
    tmpfs:
      - /prometheus  # Writable tmpfs for Prometheus data
    security_opt:
      - no-new-privileges=true  # Prevent privilege escalation
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE  # Allow binding to Prometheus port (default: 9090)
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100M
        reservations:
          cpus: '0.1'
          memory: 50M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    profiles:
      - dev
    networks:
      - app-net

  fluentd:
    image: fluent/fluentd:v1.16-1
    volumes:
      - ./fluent.conf:/fluentd/etc/fluent.conf
      - fluentd-data:/fluentd/log
    ports:
      - "24224:24224"
    profiles:
      - dev
    networks:
      - app-net

networks:
  app-net:
    driver: bridge
    name: flask-redis-net
    attachable: true

volumes:
  redis-data:
    name: redis-data
    labels:
      - "com.example.retention=7d"
      - "com.example.description=Redis persistent data"      
  prometheus-data:
  grafana-data:
  fluentd-data:

secrets:
  flask_app_key:
    file: ./flask_app_key.txt
